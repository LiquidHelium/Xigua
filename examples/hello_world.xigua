~ Welcome to Xigua
~ Xigua is a lisp, but it uses square brackets
~ Hello world in it looks something like this

[println "Hello, World! ~[._.]~"] ~ Hello, World! ~[._.]~

~ As you probably noticed you can comment code with ~
~ Like most lisps, basic math looks something like this

[println [+ 2 2]] ~ 4
[println [- 12 2 5]] ~ 5

~ Same goes for * and /

~ If statments looks like this

[if [== [- 6 2] [+ 2 2]]
	[println "4 equals 4, who would have thought?"]
	[println "Well this is wierd, 4 does not equal 4"]] ~ 4 equals 4, who would have thought?

~ Xigua uses a very unlisp like == to check for equality
~ That's because = is reserved for defining variables

[= x 42]
[println "x is"] ~ x is
[println x] ~ 42

~ You can use the string function to build strings

[println [string "x is still " x]] ~ x is still 42

~ Xigua has lists, or more accuratley Tuples
~ use { } to make them

[= my-tuple {1 2 3 4}]

~ Lambdas are created by using fn like this:

[= greet [fn {name} [println [string "Hello, " name]]]]
[greet "Peter"] ~ Hello Peter


[println "Tuple {1 2 3 4}"]
[println [string "First " [first {1 2 3 4}]]]
[println [string "last " [last {1 2 3 4}]]]
[println [string "at 2 " [at 2 {1 2 3 4}]]]
[println [string "size " [size {1 2 3 4}]]]


[= mymap #{1 "Hello" 2 "Bye" 3 "Nothing" 4 "Something"}]
[println "HashMap"]
[println mymap]
[println [string "at 2 " [at 2 mymap]]]
[println [string "size " [size mymap]]]


[= my-var "Let Works"]
[let #{ my-var  [+ 2 2] }
    [println my-var]]
[println my-var]

[= add [fn {n} 
	[let #{my-num n
		   second [+ n n]}
		[+ my-num second]]]]
[println [add 2]]


[println [+ 20 100]]
[= add20 [part + 10 5 5]]
[println [add20 100 100]]